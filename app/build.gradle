apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.noveogroup.android.check'

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.2"

  def versionPropsFile = file('version.properties')
  def versionBuild

  if (versionPropsFile.canRead()) {
    def Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    versionBuild = versionProps['VERSION_BUILD'].toInteger()
  } else {
    throw new GradleException("Could not read version.properties!")
  }

  ext.autoIncrementBuildNumber = {
    if (versionPropsFile.canRead()) {
      def Properties versionProps = new Properties()
      versionProps.load(new FileInputStream(versionPropsFile))
      versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
      versionProps['VERSION_BUILD'] = versionBuild.toString()
      versionProps.store(versionPropsFile.newWriter(), null)
    } else {
      throw new GradleException("Could not read version.properties!")
    }
  }

  defaultConfig {
    applicationId "com.oomvelt.oomvelt"
    minSdkVersion 18
    targetSdkVersion 19
    versionCode 1
    versionName "1.0.0." + versionBuild
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    debug {
      storeFile file("$rootProject.rootDir/debug.keystore")
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }

  gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(assembleDebug)) {
      autoIncrementBuildNumber()
    } else if (taskGraph.hasTask(assembleRelease)) {
      autoIncrementBuildNumber()
    }
  }
}

check {
  abortOnError false

  checkstyle {
    config "$rootProject.rootDir/config/quality/checkstyle/checkstyle-config.xml"
  }

  pmd {
    config "$rootProject.rootDir/config/quality/pmd/pmd-ruleset.xml"
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  compile 'com.afollestad.material-dialogs:core:0.9.3.0'
  compile 'com.android.support:appcompat-v7:25.1.1'
  compile 'com.android.support:design:25.1.1'
  testCompile 'junit:junit:4.12'
  compile 'com.jakewharton:butterknife:8.0.1'
  kapt 'com.jakewharton:butterknife-compiler:8.0.1'
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
  compile 'org.jetbrains.anko:anko-sdk15:0.9.1'
}

repositories {
  mavenCentral()
}

kapt {
  generateStubs = true
}